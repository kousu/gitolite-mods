#!/usr/bin/perl
use strict;
use warnings;
#use autodie; # XXX is this a good idea ???

use Fcntl qw(:DEFAULT); # for O_CREAT

use lib $ENV{GL_LIBDIR};
use Gitolite::Rc;
use Gitolite::Common;
use Gitolite::Easy;

=for usage

=cut

usage() if @ARGV and $ARGV[0] eq '-h';

# make a temp clone and switch to it
our $TEMPDIR;
BEGIN { $TEMPDIR = `mktemp -d -t tmp.XXXXXXXXXX`; }
END { `/bin/rm -rf $TEMPDIR`; }

my $rb = $rc{GL_REPO_BASE};
my $ab = $rc{GL_ADMIN_BASE};
my $is_admin = is_admin(); # this does *chdir* and doesn't reset it, so cache it
# get to the keydir
_chdir("$ab/keydir");

# get the actual userid
my $gl_user = $ENV{GL_USER};

# save arguments for later
my $operation = shift || 'list';
my $keyid     = shift || '';
# split keyid up into user and user-specific keyid (both are optional)
# and sanitize the input at the same time.
$keyid and $keyid !~ /^([-0-9a-z_]+)?(@([-0-9a-z_]+))?$/i and die "invalid keyid $keyid\n";
my $user;
( $user, $keyid ) = ( $1 || '', $3 || '' );

# ----
# ----

$user and $gl_user ne $user and die "You must be admin to manage other users' keys.\n" unless $is_admin;

die "valid operations: list, add, del\n" unless $operation =~ /^(list|add|del)$/;
if ( $operation eq 'list' ) {
    kf_list ( $user, $keyid );
} elsif ( $operation eq 'add' ) {
    if ( $is_admin ) {
        die "add requires a key name (\"user\" or \"user\@device\" or \"\@device\").\n" unless ($user or $keyid); #XXX sketchy
    } else {
        die "add requires a key name (\"$gl_user\" or \"$gl_user\@device\" or \"\@device\").\n" unless ($user or $keyid); #XXX sketchy
    }

    # TODO: only print this when in interactive mode.
    # this seems to be unavoidable though; gitolite doesn't seem to be calling us in a way that passes down the isatty() flag.
    print STDERR "please supply the new key on STDIN (e.g. cat you.pub | ssh gitolite\@git.example.com keys add \@laptop).\n";
    kf_add( $user, $keyid, safe_stdin() );
} elsif ( $operation eq 'del' ) {
    if ( $is_admin ) {
        die "del requires a key name (\"user\" or \"user\@device\" or \"\@device\").\n" unless ($user or $keyid); #XXX sketchy
    } else {
        die "del requires a key name (\"$gl_user\@device\" or \"\@device\").\n" unless ($user or $keyid); #XXX sketchy
    }
    # ^ we should give slightly different advice if you're admin or not, too
    kf_del( $user, $keyid );
}
exit;

# ----

# ----

sub cd_temp_clone {
    # BUG: this doesn't check errors, so if something wrecks it (like, say, being out of space)
    chomp($TEMPDIR);
    hushed_git( "clone", "$rb/gitolite-admin.git", "$TEMPDIR" ) or die "Unable to checkout gitolite-admin.git.\n";
    chdir($TEMPDIR);
    my $hostname = `hostname`; chomp($hostname);

    hushed_git( "config", "user.email", $ENV{USER} . "@" . $hostname ) or die "Unable to set git user.email\n";
    hushed_git( "config", "user.name",  "$ENV{USER} on $hostname" ) or die "Unable to set git user.name\n";

    return 1;
}

sub fingerprint {
    my ($fp, $output) = ssh_fingerprint_file(shift);
    # Do not print the output of $output to an untrusted destination.
    die "does not seem to be a valid pubkey\n" unless $fp;
    return $fp;
}

sub safe_stdin {
    # read one line from STDIN
    my $data;
    my $ret = read STDIN, $data, 4096;
    # current pubkeys are approx 400 bytes so we go a little overboard
    die "could not read pubkey data" . ( defined($ret) ? "" : ": $!" ) . "\n" unless $ret;
    die "pubkey data seems to have more than one line\n" if $data =~ /\n./;
    return $data;
}

sub hushed_git {
    # https://www.perl.com/article/45/2013/10/27/How-to-redirect-and-restore-STDOUT/ claims that 'local' should
    # autorestore the streams; however, it in fact overrides the global STDOUT/STDERR breaking all future output.
    # bizarrely, removing the \*STDOUT part *does not work* with system(), though it does successfully redirect print
    # and autorestore at the end.
    # if this ever worked it doesn't now.

    #local (*STDOUT) = \*STDOUT;
    #local *STDERR = \*STDERR;

    # instead, use a different solution from that article
    # dup stderr/stdout
    open (my $STDOUTOLD, '>&', STDOUT);
    open (my $STDERROLD, '>&', STDERR);

    # hush
    open( STDOUT, ">", "/dev/null" );
    open( STDERR, ">", "/dev/null" );
    my $ret = system( "git", @_ );

    # restore stderr/stdout
    open (STDOUT, '>&', $STDOUTOLD);
    open (STDERR, '>&', $STDERROLD);

    return $ret == 0;
}

# get the list of pubkey files for this user/keyid combination
# if $user is empty, list *all* pubkeys
# if both $user and $keyid are given, only return the single
sub get_pubkeys {
    my ( $user, $keyid ) = @_;
    my @pubkeys;

    for my $pubkey (`find . -type f -name "*.pub" | sort`) {
        chomp($pubkey);
        $pubkey =~ s(^./)();    # artifact of the find command

        my $key_owner = $pubkey;
        $key_owner =~ s(.*/)();                # foo/bar/baz.pub -> baz.pub
        $key_owner =~ s/(@([^.]+))?\.pub$//;  # baz.pub, baz@home.pub -> baz
        my $key_keyid = $2 || '';              # baz@home.pub -> home

        next if $user and $key_owner ne $user;
        next if $keyid and $key_keyid ne $keyid;

        push @pubkeys, $pubkey;
    }
    return @pubkeys;
}

sub print_keylist {
    my ( @list ) = @_;
    my $count = 1;
    for (@list) {
        my $fp = fingerprint($_);
        print $count++ . ": $fp : $_\n";
    }
}


# ----

sub kf_list {
    my ( $user, $keyid ) = @_;

    print "Hello $gl_user, you are " . ($is_admin ? "" : "not ") . "an admin.\n\n";

    if ( !$user and $is_admin ) {
        print "These are all registered keys:\n";
        # ASSUMPTION: there is always at least one key -- or else you wouldn't be able to run this.
    } else {
        # $user is already defined, or we're not an admin
        # in case it's the not-an-admin case, force $user to the calling user.
        $user = ($user || $gl_user);
        print ( (($user eq $gl_user) ? ('You have') : ( $user . " has" )) . " the following keys:\n" );
    }
    # TODO: special-case the no-such-user case: "$user is not registered"
    # TODO: make this underline as long as the previous line.
    # TODO: visually group keys by user
    print "============================\n";
    print_keylist( get_pubkeys($user, $keyid) );
    print "\n\n";
}

sub kf_add {
    my ( $user, $keyid, $keymaterial ) = @_;

    $user = $user || $gl_user;

    cd_temp_clone() or die "Unable to checkout working copy of gitolite-admin.git\n";
    chdir("keydir");

    my $key = "$user" . ($keyid ? "\@$keyid" : "");
    my $filename = "$key.pub";
    my $fh;
    # XXX this isn't necessarily the only error! we could be out of space, have a typo in the filename, etc
    # XXX this is vulnerable to path traversal. The only protection is that we sanitize the input at the top of the script.
    die "$key already exists.\n" unless sysopen($fh, $filename, O_CREAT | O_EXCL | O_WRONLY);
    print $fh $keymaterial;
    close $fh;

    # TODO: warn if username != the comment field on the key

    my $fp = fingerprint( $filename );
    hushed_git( "add", $filename ) or die "git add failed\n";
    hushed_git( "commit", "-m", "keys: add $key ($fp)" ) or die "git commit failed\n";
    system("gitolite push >/dev/null 2>/dev/null") and die "git push failed\n";

    print "Added $fp : $filename\n";
}

sub kf_del {
    my ( $user, $keyid ) = @_;

    $user = $user || $gl_user;

    # prevent locking out the system
    # *admins* are allowed to delete a user's last key -- admins are the only users allowed to manage other peoples' keys
    if ( $user eq $gl_user and scalar(get_pubkeys($user, ""))<=1 ) {
        die ("You cannot delete your last key. " . ($is_admin ?
                 "If you really intend to revoke your access, edit gitolite-admin.git manually, or ask a different admin to remove you." :
                 "Contact your admin to have your account removed.") . "\n" );
    }

    cd_temp_clone() or die "Unable to checkout working copy of gitolite-admin.git\n";
    chdir("keydir");

    my $key = "$user" . ($keyid ? "\@$keyid" : "");
    my $filename = "$key.pub";
    my $fp = fingerprint( $filename );
    hushed_git( "rm", $filename ) or die "git rm failed\n";
    hushed_git( "commit", "-m", "keys: del $key ($fp)" ) or die "git commit failed\n";
    system("gitolite push >/dev/null 2>/dev/null") and die "git push failed\n";

    print "Removed $fp : $filename\n";
}
