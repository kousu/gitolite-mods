#!/usr/bin/perl
use strict;
use warnings;

use lib $ENV{GL_LIBDIR};
use Gitolite::Rc;
use Gitolite::Common;
use Gitolite::Easy;


=for usage
Usage for this command is not that simple.  Please read the full documentation
in doc/sskm.mkd or online at http://gitolite.com/gitolite/sskm.html.
=cut

usage() if @ARGV and $ARGV[0] eq '-h';

my $rb = $rc{GL_REPO_BASE};
my $ab = $rc{GL_ADMIN_BASE};
my $is_admin = is_admin(); # this does *chdir* and doesn't reset it, so cache it
# get to the keydir
_chdir("$ab/keydir");

# get the actual userid
my $gl_user = $ENV{GL_USER};

# save arguments for later
my $operation = shift || 'list';
my $keyid     = shift || '';
# split keyid up into user and user-specific keyid
# both are optional
$keyid and $keyid !~ /^([-0-9a-z_]+)?(@([-0-9a-z_]+))?$/i and die "invalid keyid $keyid\n";
my $user;
( $user, $keyid ) = ( $1 || '', $3 || '' );


# get the list of pubkey files for this user
# if $user is empty, list *all* pubkeys
sub get_pubkeys {
    my ( $user ) = @_;
    my @pubkeys;

    for my $pubkey (`find . -type f -name "*.pub" | sort`) {
        chomp($pubkey);
        $pubkey =~ s(^./)();    # artifact of the find command

        my $key_owner = $pubkey;
        $key_owner =~ s(.*/)();                # foo/bar/baz.pub -> baz.pub
        $key_owner =~ s/(\@[^.]+)?\.pub$//;    # baz.pub, baz@home.pub -> baz

        next if $user and $key_owner ne $user;

        push @pubkeys, $pubkey;
    }
    return @pubkeys;
}

# ----
# ----

$user and $gl_user ne $user and die "You must be admin to edit other users' keys.\n" unless $is_admin;

die "valid operations: list, add, del\n" unless $operation =~ /^(list|add|del)$/;
if ( $operation eq 'list' ) {
    die "list does not take a keyid. Use \"keys list".($user ? " $user" : "")."\" instead.\n" if $keyid;
    kf_list ( $user );
} elsif ( $operation eq 'add' ) {
    print STDERR "please supply the new key on STDIN.  (I recommend you
    don't try to do this interactively, but use a pipe)\n";
    kf_add( $gl_user, $keyid, safe_stdin() );
} elsif ( $operation eq 'del' ) {
    kf_del( $gl_user, $keyid );
}
exit;

# ----


# make a temp clone and switch to it
our $TEMPDIR;
BEGIN { $TEMPDIR = `mktemp -d -t tmp.XXXXXXXXXX`; }
END { `/bin/rm -rf $TEMPDIR`; }

sub cd_temp_clone {
    chomp($TEMPDIR);
    hushed_git( "clone", "$rb/gitolite-admin.git", "$TEMPDIR" );
    chdir($TEMPDIR);
    my $hostname = `hostname`; chomp($hostname);
    hushed_git( "config", "--get", "user.email" ) and hushed_git( "config", "user.email", $ENV{USER} . "@" . $hostname );
    hushed_git( "config", "--get", "user.name" )  and hushed_git( "config", "user.name",  "$ENV{USER} on $hostname" );
}

sub fingerprint {
    my ($fp, $output) = ssh_fingerprint_file(shift);
    # Do not print the output of $output to an untrusted destination.
    die "does not seem to be a valid pubkey\n" unless $fp;
    return $fp;
}

sub safe_stdin {
    # read one line from STDIN
    my $data;
    my $ret = read STDIN, $data, 4096;
    # current pubkeys are approx 400 bytes so we go a little overboard
    die "could not read pubkey data" . ( defined($ret) ? "" : ": $!" ) . "\n" unless $ret;
    die "pubkey data seems to have more than one line\n" if $data =~ /\n./;
    return $data;
}

sub hushed_git {
    local (*STDOUT) = \*STDOUT;
    local (*STDERR) = \*STDERR;
    open( STDOUT, ">", "/dev/null" );
    open( STDERR, ">", "/dev/null" );
    system( "git", @_ );
}

sub highlander {
    # there can be only one
    my ( $keyid, $die_if_empty, @a ) = @_;
    # too many?
    if ( @a > 1 ) {
        print STDERR "
more than one key satisfies this condition, and I can't deal with that!
The keys are:

";
        print STDERR "\t" . join( "\n\t", @a ), "\n\n";
        exit 1;
    }
    # too few?
    die "no keys with " . ( $keyid || "empty" ) . " keyid found\n" if $die_if_empty and not @a;

    return @a;
}

sub print_keylist {
    my ( @list ) = @_;
    my $count = 1;
    for (@list) {
        my $fp = fingerprint($_);
        s/zzz-marked(\/|-for-...-)//g;
        print $count++ . ": $fp : $_\n";
    }
}


# ----

sub kf_list {

    my ( $user ) = @_;
    if ( !$user and $is_admin ) {
        print "These are all registered keys:\n";
        # ASSUMPTION: there is always at least one key -- or else you wouldn't be able to run this.
    } else {
        # $user is already defined, or we're not an admin
        # in case it's the not-an-admin case, force $user to the calling user.
        $user = ($user || $gl_user);
        print ( (($user eq $gl_user) ? ('You have') : ( $user . " has" )) . " the following keys:\n" );
    }
    # TODO: special-case the no-such-user case: "$user is not registered"
    # TODO: make this underline as long as the previous line.
    # TODO: visually group keys by user
    print "============================\n";
    print_keylist( get_pubkeys($user) );
    print "\n\n";
}

sub kf_add {
    my ( $gl_user, $keyid, $keymaterial ) = @_;

    # add a new "marked for addition" key for $gl_user.
    cd_temp_clone();
    chdir("keydir");

    mkdir("zzz-marked");
    _print( "zzz-marked/zzz-marked-for-add-$gl_user$keyid.pub", $keymaterial );
    hushed_git( "add", "." ) and die "git add failed\n";
    my $fp = fingerprint("zzz-marked/zzz-marked-for-add-$gl_user$keyid.pub");
exit;
    hushed_git( "commit", "-m", "sskm: add $gl_user$keyid ($fp)" ) and die "git commit failed\n";
    system("gitolite push >/dev/null 2>/dev/null") and die "git push failed\n";
}

sub kf_del {
    my ( $gl_user, $keyid ) = @_;

    cd_temp_clone();
    chdir("keydir");

    mkdir("zzz-marked");
    #my @pk = highlander( $keyid, 1, grep { m(^(.*/)?$gl_user$keyid.pub$) } @pubkeys );
    my @pk;

    my $fp = fingerprint( $pk[0] );
    hushed_git( "mv", $pk[0], "zzz-marked/zzz-marked-for-del-$gl_user$keyid.pub" ) and die "git mv failed\n";
    hushed_git( "commit", "-m", "sskm: del $pk[0] ($fp)" ) and die "git commit failed\n";
    system("gitolite push >/dev/null 2>/dev/null") and die "git push failed\n";
}

sub kf_confirm_del {
    my ( $gl_user, $keyid ) = @_;
    #my @mfd = highlander( $keyid, 1, grep { m(^zzz-marked/zzz-marked-for-del-$gl_user$keyid.pub$) } @marked_for_del );
    my @mfd;

    cd_temp_clone();
    chdir("keydir");

    my $fp = fingerprint( $mfd[0] );
    hushed_git( "rm", $mfd[0] );
    hushed_git( "commit", "-m", "sskm: confirm-del $gl_user$keyid ($fp)" ) and die "git commit failed\n";
    system("gitolite push >/dev/null 2>/dev/null") and die "git push failed\n";
}
